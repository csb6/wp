(*
WP: guarded command language tools
Copyright (C) 2024  Cole Blakley

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*)

structure PAST = Position_AST

val symbols = ref AtomSet.empty

fun addSymbol s = let
    val a = Atom.atom s in
    case AtomSet.find (fn item => Atom.compare (item, a) = EQUAL) (!symbols) of
       NONE      => (symbols := AtomSet.add (!symbols, a); a)
     | SOME item => item
end

fun addVar s = PAST.Var (addSymbol s)

fun toStmt [stmt]   = stmt
  | toStmt stmtList = PAST.Seq (rev stmtList)

%%

%name GCL
%pure
%verbose
%pos PAST.pos

%term PLUS | MINUS | TIMES | DIVIDE | EQUAL | NOT_EQUAL | AND | OR | NOT | ASSIGN | SEMICOLON | BAR
    | ARROW | COMMA | LPAREN | RPAREN | IF | END | BLOCK | SKIP | ABORT | INT of int | BOOL of bool
    | IDENT of string | EOF

%nonterm START of PAST.statement | STMT of PAST.statement | ASSIGN_STMT of PAST.statement | EXPR of PAST.expression
       | UNARYEXPR of PAST.expression | BINEXPR of PAST.expression | GUARDED_CMD of PAST.guarded_command
       | GUARDED_CMD_SET of PAST.guarded_command list | STMT_LIST of PAST.statement list

%eop EOF
%noshift EOF

%left SEMICOLON
%left OR
%left AND
%nonassoc EQUAL NOT_EQUAL
%left MINUS PLUS
%left DIVIDE TIMES
%right NOT

%%

START : STMT (STMT)

(* Statements *)

STMT : SKIP                   (PAST.Skip defaultPos)
     | ABORT                  (PAST.Abort defaultPos)
     | EXPR                   (PAST.ExprStmt EXPR)
     | ASSIGN_STMT            (ASSIGN_STMT)
     | IF GUARDED_CMD_SET END (PAST.IfStmt (rev GUARDED_CMD_SET, IFleft))
     (* This might be removed later - added to make writing plain sequences easier *)
     | BLOCK STMT_LIST END    (toStmt STMT_LIST)

ASSIGN_STMT : IDENT ASSIGN EXPR (PAST.Assignment (addVar IDENT, EXPR, EXPRleft))
(* TODO: concurrent assignment *)

STMT_LIST : STMT                     ([STMT])
          | STMT_LIST SEMICOLON STMT (STMT::STMT_LIST)

(* Guarded Command *)

GUARDED_CMD : EXPR ARROW STMT_LIST (EXPR, toStmt STMT_LIST)

GUARDED_CMD_SET : GUARDED_CMD                     ([GUARDED_CMD])
                | GUARDED_CMD_SET BAR GUARDED_CMD (GUARDED_CMD::GUARDED_CMD_SET)

(* Expressions *)

EXPR : BOOL               (PAST.Bool (BOOL, defaultPos))
     | INT                (PAST.Int (INT, defaultPos))
     | IDENT              (PAST.VarExpr (addVar IDENT, defaultPos))
     | UNARYEXPR          (UNARYEXPR)
     | BINEXPR            (BINEXPR)
     | LPAREN EXPR RPAREN (EXPR)

UNARYEXPR : NOT EXPR      (PAST.UnaryExpr (PAST.Not, EXPR))

BINEXPR : EXPR PLUS EXPR      (PAST.BinExpr (EXPR1, PAST.Plus, EXPR2, PLUSleft))
        | EXPR MINUS EXPR     (PAST.BinExpr (EXPR1, PAST.Minus, EXPR2, MINUSleft))
        | EXPR TIMES EXPR     (PAST.BinExpr (EXPR1, PAST.Mult, EXPR2, TIMESleft))
        | EXPR DIVIDE EXPR    (PAST.BinExpr (EXPR1, PAST.Div, EXPR2, DIVIDEleft))
        | EXPR EQUAL EXPR     (PAST.BinExpr (EXPR1, PAST.Eq, EXPR2, EQUALleft))
        | EXPR NOT_EQUAL EXPR (PAST.BinExpr (EXPR1, PAST.Ne, EXPR2, NOT_EQUALleft))
        | EXPR AND EXPR       (PAST.BinExpr (EXPR1, PAST.And, EXPR2, ANDleft))
        | EXPR OR EXPR        (PAST.BinExpr (EXPR1, PAST.Or, EXPR2, ORleft))